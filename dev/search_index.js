var documenterSearchIndex = {"docs":
[{"location":"ararma/#ARAR-/-ARARMA","page":"ARAR/ARARMA","title":"ARAR / ARARMA","text":"","category":"section"},{"location":"ararma/#Forecasting-Using-Arar","page":"ARAR/ARARMA","title":"Forecasting Using Arar","text":"","category":"section"},{"location":"ararma/#How-Arar-Model-Works","page":"ARAR/ARARMA","title":"How Arar Model Works","text":"","category":"section"},{"location":"ararma/","page":"ARAR/ARARMA","title":"ARAR/ARARMA","text":"The ARAR model applies a memory-shortening transformation if the underlying process of a given time series Y_t t = 1 2  n is \"long-memory\" then it fits an autoregressive model.","category":"page"},{"location":"ararma/#Memory-Shortening","page":"ARAR/ARARMA","title":"Memory Shortening","text":"","category":"section"},{"location":"ararma/","page":"ARAR/ARARMA","title":"ARAR/ARARMA","text":"The model follows five steps to classify Y_t and take one of the following three actions:","category":"page"},{"location":"ararma/","page":"ARAR/ARARMA","title":"ARAR/ARARMA","text":"L: declare Y_t as long memory and form  Y_t by tildeY_t = Y_t - hatphiY_t - hattau\nM: declare Y_t as moderately long memory and form  Y_t by tildeY_t = Y_t - hatphi_1Y_t -1 - hatphi_2Y_t -2\nS: declare Y_t as short memory.","category":"page"},{"location":"ararma/","page":"ARAR/ARARMA","title":"ARAR/ARARMA","text":"If Y_t declared to be L or M then the series Y_t is transformed again until. The transformation process continuous until the transformed series is classified as short memory. However, the maximum number of transformation process is three, it is very rare a time series require more than 2.","category":"page"},{"location":"ararma/","page":"ARAR/ARARMA","title":"ARAR/ARARMA","text":"For each tau = 1 2  15, we find the value hatphi(tau)  of hatphi that minimizes ERR(phi tau) = fracsum_t=tau +1 ^n Y_t - phi Y_t-tau^2 sum_t=tau +1 ^n Y_t^2 then define Err(tau) = ERR(hatphi(tau) tau) and choose the lag hattau to be the value of tau that minimizes  Err(tau).\nIf Err(hattau) leq  8n,  Y_t is a long-memory series.\nIf hatphi( hattau ) geq 093 and hattau  2,  Y_t is a long-memory series.\nIf hatphi( hattau ) geq 093 and hattau = 1 or 2, Y_t is a long-memory series.\nIf hatphi( hattau )  093, Y_t is a short-memory series.","category":"page"},{"location":"ararma/#Subset-Autoregressive-Model:","page":"ARAR/ARARMA","title":"Subset Autoregressive Model:","text":"","category":"section"},{"location":"ararma/","page":"ARAR/ARARMA","title":"ARAR/ARARMA","text":"In the following we will describe how ARAR algorithm fits an autoregressive process to the mean-corrected series X_t = S_t- barS, t = k+1  n where S_t t = k + 1  n is the memory-shortened version of  Y_t which derived from the five steps we described above and barS is the sample mean of S_k+1  S_n.","category":"page"},{"location":"ararma/","page":"ARAR/ARARMA","title":"ARAR/ARARMA","text":"The fitted model has the following form:","category":"page"},{"location":"ararma/","page":"ARAR/ARARMA","title":"ARAR/ARARMA","text":"X_t = phi_1Xt-1 + phi_1X_t-l_1 + phi_1X_t- l_1 + phi_1X_t-l_1 + Z","category":"page"},{"location":"ararma/","page":"ARAR/ARARMA","title":"ARAR/ARARMA","text":"where Z sim WN(0 sigma^2). The coefficients phi_j and white noise variance sigma^2 can be derived from the Yule-Walker equations for given lags l_1 l_2 and l_3 :","category":"page"},{"location":"ararma/","page":"ARAR/ARARMA","title":"ARAR/ARARMA","text":"\\begin{equation} \\begin{bmatrix} 1 & \\hat{\\rho}(l1 - 1) & \\hat{\\rho}(l2 - 1) & \\hat{\\rho}(l3 - 1)\\\n\\hat{\\rho}(l1 - 1) &1 & \\hat{\\rho}(l2 - l1) & \\hat{\\rho}(l3 - l1)\\\n\\hat{\\rho}(l2 - 1) & \\hat{\\rho}(l2 - l1) & 1 & \\hat{\\rho}(l2 - l2)\\\n\\hat{\\rho}(l3 - 1) & \\hat{\\rho}(l3 - l1) & \\hat{\\rho}(l3 - l1) & 1 \\end{bmatrix}*\\begin{bmatrix} \\phi{1} \\\n\\phi{l1} \\\n\\phi{l2}\\\n\\phi{l3} \\end{bmatrix} = \\begin{bmatrix} \\hat{\\rho}(1) \\ \\hat{\\rho}(l1) \\ \\hat{\\rho}(l2)\\ \\hat{\\rho}(l3) \\end{bmatrix} \\end{equation}","category":"page"},{"location":"ararma/","page":"ARAR/ARARMA","title":"ARAR/ARARMA","text":"and sigma^2 = hatgamma(0) 1-phi_1hatrho(1) - phi_l_1hatrho(l_1) - phi_l_2hatrho(l_2) - phi_l_3hatrho(l_3), where hatgamma(j) and hatrho(j) j = 0 1 2  are the sample autocovariances and autocorelations of the series X_t.","category":"page"},{"location":"ararma/","page":"ARAR/ARARMA","title":"ARAR/ARARMA","text":"The algorithm computes the coefficients of phi(j) for each set of lags where 1l_1l_2l_3 leq m where m chosen to be 13 or 26. The algorithm selects the model that the Yule-Walker estimate of sigma^2 is minimal.","category":"page"},{"location":"ararma/#Forecasting","page":"ARAR/ARARMA","title":"Forecasting","text":"","category":"section"},{"location":"ararma/","page":"ARAR/ARARMA","title":"ARAR/ARARMA","text":"If short-memory filter found in first step it has coefficients Psi_0 Psi_1  Psi_k (k geq0) where Psi_0 = 1. In this case the transforemed series can be expressed as \\begin{equation}     St = \\Psi(B)Yt = Yt + \\Psi1 Y{t-1} + ...+ \\Psik Y{t-k}, \\end{equation} where \\Psi(B) = 1 + \\Psi1B + ...+ \\Psi_k B^k$ is polynomial in the back-shift operator.","category":"page"},{"location":"ararma/","page":"ARAR/ARARMA","title":"ARAR/ARARMA","text":"If the coefficients of the subset autoregression found in the second step it has coefficients phi_1 phi_l_1  phi_l_2 and phi_l_3 then the subset AR model for X_t = S_t - barS is","category":"page"},{"location":"ararma/","page":"ARAR/ARARMA","title":"ARAR/ARARMA","text":"\\begin{equation}     \\phi(B)Xt = Zt, \\end{equation}","category":"page"},{"location":"ararma/","page":"ARAR/ARARMA","title":"ARAR/ARARMA","text":"where Z_t is a white-noise series with zero mean and constant variance and phi(B) = 1 - phi_1B - phi_l_1B^l_1 - phi_l_2B^l_2 - phi_l_3B^l_3. From equation (1) and (2) one can obtain","category":"page"},{"location":"ararma/","page":"ARAR/ARARMA","title":"ARAR/ARARMA","text":"\\begin{equation}     \\xi(B)Yt = \\phi(1)\\bar{S} + Zt, \\end{equation} where xi (B) = Psi(B)phi(B).","category":"page"},{"location":"ararma/","page":"ARAR/ARARMA","title":"ARAR/ARARMA","text":"Assuming the fitted model in equation (3) is an appropriate model, and Z_t is uncorrelated with Y_j j t forall t in T, one can determine minimum mean squared error linear predictors P_n Y_n + h of Y_n+h in terms of 1 Y_1  Y_n for n  k + l_3, from recursions","category":"page"},{"location":"ararma/","page":"ARAR/ARARMA","title":"ARAR/ARARMA","text":"\\begin{equation}     Pn Y{n+h} = - \\sum{j = 1}^{k + l3} \\xi PnY{n+h-j} + \\phi(1)\\bar{S},  h\\geq 1, \\end{equation} with the initial conditions P_n Y_n+h = Y_n + h, for hleq0.","category":"page"},{"location":"ararma/","page":"ARAR/ARARMA","title":"ARAR/ARARMA","text":"Ref: Brockwell, Peter J, and Richard A. Davis. Introduction to Time Series and Forecasting. Springer (2016)","category":"page"},{"location":"ararma/#Forecasing-in-Julia-using-Arar-Model","page":"ARAR/ARARMA","title":"Forecasing in Julia using Arar Model","text":"","category":"section"},{"location":"ararma/","page":"ARAR/ARARMA","title":"ARAR/ARARMA","text":"using Durbyn\nusing Durbyn.Ararma\n\nap = air_passengers()\n\nfit = arar(ap, max_ar_depth = 13)\nfc  = forecast(fit, h = 12)\nplot(fc)\n","category":"page"},{"location":"ararma/#Forecasing-in-Julia-using-Ararma-Model","page":"ARAR/ARARMA","title":"Forecasing in Julia using Ararma Model","text":"","category":"section"},{"location":"ararma/","page":"ARAR/ARARMA","title":"ARAR/ARARMA","text":"docs #TODO","category":"page"},{"location":"ararma/","page":"ARAR/ARARMA","title":"ARAR/ARARMA","text":"fit2 = ararma(ap, p = 0, q = 1)\nfc2  = forecast(fit2, h = 12)\nplot(fc2)\n\nfit3 = auto_ararma(ap)\nfc3  = forecast(fit3, h = 12)\nplot(fc3)","category":"page"},{"location":"expsmoothing/#Exponential-Smoothing-(ETS)","page":"Exponential Smoothing","title":"Exponential Smoothing (ETS)","text":"","category":"section"},{"location":"expsmoothing/","page":"Exponential Smoothing","title":"Exponential Smoothing","text":"Durbyn provides classical ETS variants and helpers.","category":"page"},{"location":"expsmoothing/","page":"Exponential Smoothing","title":"Exponential Smoothing","text":"using Durbyn\nusing Durbyn.ExponentialSmoothing\n\nap = air_passengers()\n\nfit_ets = ets(ap, 12, \"ZZZ\")\nfc_ets  = forecast(fit_ets, h = 12)\nplot(fc_ets)\n\nses_fit = ses(ap, 12)\nses_fc  = forecast(ses_fit, h = 12)\nplot(ses_fc)\n\nholt_fit = holt(ap, 12)\nholt_fc  = forecast(holt_fit, h = 12)\nplot(holt_fc)\n\nhw_fit = holt_winters(ap, 12)\nhw_fc  = forecast(hw_fit, h = 12)\nplot(hw_fc)","category":"page"},{"location":"expsmoothing/","page":"Exponential Smoothing","title":"Exponential Smoothing","text":"Arguments","category":"page"},{"location":"expsmoothing/","page":"Exponential Smoothing","title":"Exponential Smoothing","text":"season (12 for monthly, 4 for quarterly, etc.)\nspec string selecting error / trend / seasonality (e.g. \"ZZZ\")","category":"page"},{"location":"api/#API-Reference","page":"API Reference","title":"API Reference","text":"","category":"section"},{"location":"quickstart/#Quick-Start","page":"Quick Start","title":"Quick Start","text":"","category":"section"},{"location":"quickstart/","page":"Quick Start","title":"Quick Start","text":"Install (dev version):","category":"page"},{"location":"quickstart/","page":"Quick Start","title":"Quick Start","text":"using Pkg\nPkg.add(url=\"https://github.com/taf-society/Durbyn.jl\")","category":"page"},{"location":"quickstart/","page":"Quick Start","title":"Quick Start","text":"Basic forecasting with Exponential Smoothing (ETS):","category":"page"},{"location":"quickstart/","page":"Quick Start","title":"Quick Start","text":"using Durbyn\nusing Durbyn.ExponentialSmoothing\n\nap = air_passengers()\nfit_ets = ets(ap, 12, \"ZZZ\")\nfc_ets  = forecast(fit_ets, h = 12)","category":"page"},{"location":"quickstart/","page":"Quick Start","title":"Quick Start","text":"Plot (example with Plots.jl):","category":"page"},{"location":"quickstart/","page":"Quick Start","title":"Quick Start","text":"using Plots\nplot(fc_ets)","category":"page"},{"location":"quickstart/","page":"Quick Start","title":"Quick Start","text":"Next: Explore Intermittent Demand, ARIMA, and ARAR/ARARMA.","category":"page"},{"location":"arima/#ARIMA","page":"ARIMA","title":"ARIMA","text":"","category":"section"},{"location":"arima/","page":"ARIMA","title":"ARIMA","text":"Fit ARIMA models or let auto_arima choose orders.","category":"page"},{"location":"arima/","page":"ARIMA","title":"ARIMA","text":"using Durbyn\nusing Durbyn.Arima\n\nap  = air_passengers()\nfit = arima(ap, 12, order = PDQ(2,1,1), seasonal = PDQ(0,1,0))\nfc  = forecast(fit, h = 12)\n\nfit2 = auto_arima(ap, 12, d = 1, D = 1)\nfc2  = forecast(fit2, h = 12)\n\nplot(fc)","category":"page"},{"location":"#Durbyn.jl","page":"Home","title":"Durbyn.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"(Image: Durbyn.jl logo)","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: Stable) (Image: Dev) (Image: Build Status) (Image: Coverage)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Durbyn is a Julia package that implements functionality of the R forecast package, providing tools for time-series forecasting.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The name Durbyn traces back to Kurdish, where Dur means “far” and Byn means “to see,” together signifying binoculars, which is why the package logo features them.","category":"page"},{"location":"","page":"Home","title":"Home","text":"This site documents the development version. After your first tagged release, see stable docs for the latest release.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#About-TAFS","page":"Home","title":"About TAFS","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"TAFS (Time Series Analysis and Forecasting Society) is a non-profit association (“Verein”) in Vienna, Austria. It connects academics, experts, practitioners, and students focused on time-series, forecasting, and decision science. Contributions remain fully open source.   Learn more at taf-society.org.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Durbyn is under active development. For the latest dev version:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Pkg\nPkg.add(url=\"https://github.com/taf-society/Durbyn.jl\")","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#Quick-peek-(ETS)","page":"Home","title":"Quick peek (ETS)","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"using Durbyn\nusing Durbyn.ExponentialSmoothing\n\nap = air_passengers()\n\nfit_ets = ets(ap, 12, \"ZZZ\")\nfc_ets  = forecast(fit_ets, h = 12)\nplot(fc_ets)\n\nses_fit = ses(ap, 12)\nses_fc  = forecast(ses_fit, h = 12)\nplot(ses_fc)\n\nholt_fit = holt(ap, 12)\nholt_fc  = forecast(holt_fit, h = 12)\nplot(holt_fc)\n\nhw_fit = holt_winters(ap, 12)\nhw_fc  = forecast(hw_fit, h = 12)\nplot(hw_fc)","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#Intermittent-demand-(Croston-variants)","page":"Home","title":"Intermittent demand (Croston variants)","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"data = [6, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 0, 0, 0,\n0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, \n0, 0, 0, 0, 0];\n\n# Based on Shenstone & Hyndman (2005)\nm = 1\nfit_crst = croston(data, m)\nfc_crst  = forecast(fit_crst, 12)\nplot(fc_crst)\n\nusing Durbyn.IntermittentDemand\n\n# Classical Croston (Croston, 1972)\ncrst1 = croston_classic(data)\nfc1   = forecast(crst1, h = 12)\n\nresiduals(crst1); residuals(fc1);\nfitted(crst1);    fitted(fc1);\nplot(fc1, show_fitted = true)\n\n# Croston + SBA correction\ncrst2 = croston_sba(data)\nfc2   = forecast(crst2, h = 12)\nplot(fc2, show_fitted = true)\n\n# Croston + SBJ correction\ncrst3 = croston_sbj(data)\nfc3   = forecast(crst3, h = 12)\nplot(fc3, show_fitted = true)","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#ARIMA","page":"Home","title":"ARIMA","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"using Durbyn.Arima\n\nap  = air_passengers()\n\n# manual ARIMA\nfit = arima(ap, 12, order = PDQ(2,1,1), seasonal = PDQ(0,1,0))\nfc  = forecast(fit, h = 12)\n\n# auto ARIMA\nfit2 = auto_arima(ap, 12, d = 1, D = 1)\nfc2  = forecast(fit2, h = 12)\nplot(fc2)","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#ARAR-/-ARARMA","page":"Home","title":"ARAR / ARARMA","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"using Durbyn\nusing Durbyn.Ararma\n\nap = air_passengers()\n\nfit  = arar(ap, max_ar_depth = 13)\nfc   = forecast(fit, h = 12)\nplot(fc)\n\nfit2 = ararma(ap, p = 0, q = 1)\nfc2  = forecast(fit2, h = 12)\nplot(fc2)\n\nfit3 = auto_ararma(ap)\nfc3  = forecast(fit3, h = 12)\nplot(fc3)","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#License","page":"Home","title":"License","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"MIT License.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#What’s-next","page":"Home","title":"What’s next","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Read the Quick Start (left sidebar).\nExplore User Guide pages (ETS, Intermittent Demand, ARIMA, ARAR/ARARMA).\nSee the API Reference for full docs.","category":"page"},{"location":"intermittent/#Intermittent-Demand","page":"Intermittent Demand","title":"Intermittent Demand","text":"","category":"section"},{"location":"intermittent/","page":"Intermittent Demand","title":"Intermittent Demand","text":"Tools for sparse series with many zeros, including Croston variants.","category":"page"},{"location":"intermittent/","page":"Intermittent Demand","title":"Intermittent Demand","text":"using Durbyn\nusing Durbyn.IntermittentDemand\n\ndata = [6, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 0, 0, 0,\n0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, \n0, 0, 0, 0, 0];\n\n# Classical Croston method\ncrst = croston_classic(data)\nfc   = forecast(crst, h = 12)\nplot(fc, show_fitted = true)\n\n# SBA bias-corrected\ncrst2 = croston_sba(data)\nfc2   = forecast(crst2, h = 12)\n\n# SBJ correction\ncrst3 = croston_sbj(data)\nfc3   = forecast(crst3, h = 12)","category":"page"},{"location":"intermittent/","page":"Intermittent Demand","title":"Intermittent Demand","text":"Inspection","category":"page"},{"location":"intermittent/","page":"Intermittent Demand","title":"Intermittent Demand","text":"residuals(crst); residuals(fc);\nfitted(crst);    fitted(fc);","category":"page"}]
}
